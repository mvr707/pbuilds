.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter::Declare::Magic 3"
.TH Exporter::Declare::Magic 3 "2011-08-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter::Declare::Magic \- Enhance Exporter::Declare with some fancy magic.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Some::Exporter;
\&    use Exporter::Declare \*(Aq\-magic\*(Aq;
\&
\&    ... #Same as the basic exporter synopsis
\&
\&    #Quoting is not necessary unless you have space or special characters
\&    export another_sub;
\&    export parsed_sub parser;
\&
\&    # no \*(Aqsub\*(Aq keyword, not a typo
\&    export anonymous_export {
\&        ...
\&    }
\&    #No semicolon, not a typo
\&
\&    export parsed_anon parser {
\&        ...
\&    }
\&
\&    # Same as export
\&    default_export name { ... }
\&
\&    # No quoting required
\&    export $VAR;
\&    export %VAR;
\&
\&    my $iterator = \*(Aqa\*(Aq;
\&    gen_export unique_class_id {
\&        my $current = $iterator++;
\&        return sub { $current };
\&    }
\&
\&    gen_default_export \*(Aq$my_letter\*(Aq {
\&        my $letter = $iterator++;
\&        return \e$letter;
\&    }
\&
\&    parser myparser {
\&        ... See Devel::Declare
\&    }
\&
\&    parsed_exports parser => qw/ parsed_sub_a parsed_sub_b /;
\&    parsed_default_exports parser_b => qw/ parsed_sub_c /;
.Ve
.SH "API"
.IX Header "API"
These all work fine in function or method form, however the syntax sugar will
only work in function form.
.ie n .IP "parsed_exports( $parser, @exports )" 4
.el .IP "parsed_exports( \f(CW$parser\fR, \f(CW@exports\fR )" 4
.IX Item "parsed_exports( $parser, @exports )"
Add exports that should use a 'Devel::Declare' based parser. The parser should
be the name of a registered Devel::Declare::Interface parser, or the name of
a parser sub created using the \fIparser()\fR function.
.ie n .IP "parsed_default_exports( $parser, @exports )" 4
.el .IP "parsed_default_exports( \f(CW$parser\fR, \f(CW@exports\fR )" 4
.IX Item "parsed_default_exports( $parser, @exports )"
Same as \fIparsed_exports()\fR, except exports are added to the \-default tag.
.IP "parser name { ... }" 4
.IX Item "parser name { ... }"
.PD 0
.IP "parser name => \e&code" 4
.IX Item "parser name => &code"
.PD
Define a parser. You need to be familiar with Devel::Declare to make use of
this.
.ie n .IP "export( $name )" 4
.el .IP "export( \f(CW$name\fR )" 4
.IX Item "export( $name )"
.PD 0
.ie n .IP "export( $name, $ref )" 4
.el .IP "export( \f(CW$name\fR, \f(CW$ref\fR )" 4
.IX Item "export( $name, $ref )"
.ie n .IP "export( $name, $parser )" 4
.el .IP "export( \f(CW$name\fR, \f(CW$parser\fR )" 4
.IX Item "export( $name, $parser )"
.ie n .IP "export( $name, $parser, $ref )" 4
.el .IP "export( \f(CW$name\fR, \f(CW$parser\fR, \f(CW$ref\fR )" 4
.IX Item "export( $name, $parser, $ref )"
.IP "export name { ... }" 4
.IX Item "export name { ... }"
.IP "export name parser { ... }" 4
.IX Item "export name parser { ... }"
.PD
export is a keyword that lets you export any 1 item at a time. The item can be
exported by name, name+ref, or name+parser+ref. You can also use it without
parentheses or quotes followed by a codeblock.
.ie n .IP "default_export( $name )" 4
.el .IP "default_export( \f(CW$name\fR )" 4
.IX Item "default_export( $name )"
.PD 0
.ie n .IP "default_export( $name, $ref )" 4
.el .IP "default_export( \f(CW$name\fR, \f(CW$ref\fR )" 4
.IX Item "default_export( $name, $ref )"
.ie n .IP "default_export( $name, $parser )" 4
.el .IP "default_export( \f(CW$name\fR, \f(CW$parser\fR )" 4
.IX Item "default_export( $name, $parser )"
.ie n .IP "default_export( $name, $parser, $ref )" 4
.el .IP "default_export( \f(CW$name\fR, \f(CW$parser\fR, \f(CW$ref\fR )" 4
.IX Item "default_export( $name, $parser, $ref )"
.IP "default_export name { ... }" 4
.IX Item "default_export name { ... }"
.IP "default_export name parser { ... }" 4
.IX Item "default_export name parser { ... }"
.ie n .IP "gen_export( $name )" 4
.el .IP "gen_export( \f(CW$name\fR )" 4
.IX Item "gen_export( $name )"
.ie n .IP "gen_export( $name, $ref )" 4
.el .IP "gen_export( \f(CW$name\fR, \f(CW$ref\fR )" 4
.IX Item "gen_export( $name, $ref )"
.ie n .IP "gen_export( $name, $parser )" 4
.el .IP "gen_export( \f(CW$name\fR, \f(CW$parser\fR )" 4
.IX Item "gen_export( $name, $parser )"
.ie n .IP "gen_export( $name, $parser, $ref )" 4
.el .IP "gen_export( \f(CW$name\fR, \f(CW$parser\fR, \f(CW$ref\fR )" 4
.IX Item "gen_export( $name, $parser, $ref )"
.IP "gen_export name { ... }" 4
.IX Item "gen_export name { ... }"
.IP "gen_export name parser { ... }" 4
.IX Item "gen_export name parser { ... }"
.ie n .IP "gen_default_export( $name )" 4
.el .IP "gen_default_export( \f(CW$name\fR )" 4
.IX Item "gen_default_export( $name )"
.ie n .IP "gen_default_export( $name, $ref )" 4
.el .IP "gen_default_export( \f(CW$name\fR, \f(CW$ref\fR )" 4
.IX Item "gen_default_export( $name, $ref )"
.ie n .IP "gen_default_export( $name, $parser )" 4
.el .IP "gen_default_export( \f(CW$name\fR, \f(CW$parser\fR )" 4
.IX Item "gen_default_export( $name, $parser )"
.ie n .IP "gen_default_export( $name, $parser, $ref )" 4
.el .IP "gen_default_export( \f(CW$name\fR, \f(CW$parser\fR, \f(CW$ref\fR )" 4
.IX Item "gen_default_export( $name, $parser, $ref )"
.IP "gen_default_export name { ... }" 4
.IX Item "gen_default_export name { ... }"
.IP "gen_default_export name parser { ... }" 4
.IX Item "gen_default_export name parser { ... }"
.PD
These all act just like \fIexport()\fR, except that they add subrefs as generators,
and/or add exports to the \-default tag.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chad Granum exodist7@gmail.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010 Chad Granum
.PP
Exporter-Declare is free software; Standard perl licence.
.PP
Exporter-Declare is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or
\&\s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the license for more details.
