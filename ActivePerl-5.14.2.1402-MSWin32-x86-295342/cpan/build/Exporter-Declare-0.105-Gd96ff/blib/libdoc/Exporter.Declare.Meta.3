.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter::Declare::Meta 3"
.TH Exporter::Declare::Meta 3 "2011-08-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter::Declare::Meta \- The mata object which stoes meta\-data for all
exporters.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All classes that use Exporter::Declare have an associated Meta object. Meta
objects track available exports, tags, and options.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$class\->new( $package )" 4
.el .IP "\f(CW$class\fR\->new( \f(CW$package\fR )" 4
.IX Item "$class->new( $package )"
Created a meta object for the specified package. Also injects the \fIexport_meta()\fR
sub into the package namespace that returns the generated meta object.
.ie n .IP "$class\->new_from_exporter( $package )" 4
.el .IP "\f(CW$class\fR\->new_from_exporter( \f(CW$package\fR )" 4
.IX Item "$class->new_from_exporter( $package )"
Create a meta object for a package that already uses Exporter.pm. This will not
turn the class into an Exporter::Declare package, but it will create a meta
object and \fIexport_meta()\fR method on it. This si primarily used for reexport
purposes.
.ie n .IP "$package = $meta\->\fIpackage()\fR" 4
.el .IP "\f(CW$package\fR = \f(CW$meta\fR\->\fIpackage()\fR" 4
.IX Item "$package = $meta->package()"
Get the name of the package with which the meta object is associated.
.ie n .IP "$meta\->\fIadd_alias()\fR" 4
.el .IP "\f(CW$meta\fR\->\fIadd_alias()\fR" 4
.IX Item "$meta->add_alias()"
Usually called at construction to add a package alias function to the exports.
.ie n .IP "$meta\->add_export( $name, $ref )" 4
.el .IP "\f(CW$meta\fR\->add_export( \f(CW$name\fR, \f(CW$ref\fR )" 4
.IX Item "$meta->add_export( $name, $ref )"
Add an export, name should be the item name with sigil (assumed to be sub if
there is no sigil). \f(CW$ref\fR should be a ref blessed as an
Exporter::Declare::Export subclass.
.ie n .IP "$meta\->get_export( $name )" 4
.el .IP "\f(CW$meta\fR\->get_export( \f(CW$name\fR )" 4
.IX Item "$meta->get_export( $name )"
Retrieve the Exporter::Declare::Export object by name. Name should be the
item name with sigil, assumed to be sub when sigil is missing.
.ie n .IP "$meta\->export_tags_push( $name, @items )" 4
.el .IP "\f(CW$meta\fR\->export_tags_push( \f(CW$name\fR, \f(CW@items\fR )" 4
.IX Item "$meta->export_tags_push( $name, @items )"
Add \f(CW@items\fR to the specified tag. Tag will be created if it does not already
exist. \f(CW$name\fR should be the tag name \fB\s-1WITHOUT\s0\fR \-/: prefix.
.ie n .IP "$bool = $meta\->is_tag( $name )" 4
.el .IP "\f(CW$bool\fR = \f(CW$meta\fR\->is_tag( \f(CW$name\fR )" 4
.IX Item "$bool = $meta->is_tag( $name )"
Check if a tag with the given name exists.  \f(CW$name\fR should be the tag name
\&\fB\s-1WITHOUT\s0\fR \-/: prefix.
.ie n .IP "@list = $meta\->get_tag( $name )" 4
.el .IP "\f(CW@list\fR = \f(CW$meta\fR\->get_tag( \f(CW$name\fR )" 4
.IX Item "@list = $meta->get_tag( $name )"
Get the list of items associated with the specified tag.  \f(CW$name\fR should be the
tag name \fB\s-1WITHOUT\s0\fR \-/: prefix.
.ie n .IP "$meta\->add_options( @names )" 4
.el .IP "\f(CW$meta\fR\->add_options( \f(CW@names\fR )" 4
.IX Item "$meta->add_options( @names )"
Add import options by name. These will be boolean options that take no
arguments.
.ie n .IP "$meta\->add_arguments( @names )" 4
.el .IP "\f(CW$meta\fR\->add_arguments( \f(CW@names\fR )" 4
.IX Item "$meta->add_arguments( @names )"
Add import options that slurp in the next argument as a value.
.ie n .IP "$bool = $meta\->is_option( $name )" 4
.el .IP "\f(CW$bool\fR = \f(CW$meta\fR\->is_option( \f(CW$name\fR )" 4
.IX Item "$bool = $meta->is_option( $name )"
Check if the specifed name is an option.
.ie n .IP "$bool = $meta\->is_argument( $name )" 4
.el .IP "\f(CW$bool\fR = \f(CW$meta\fR\->is_argument( \f(CW$name\fR )" 4
.IX Item "$bool = $meta->is_argument( $name )"
Check if the specifed name is an option that takes an argument.
.ie n .IP "$meta\->add_parser( $name, sub { ... })" 4
.el .IP "\f(CW$meta\fR\->add_parser( \f(CW$name\fR, sub { ... })" 4
.IX Item "$meta->add_parser( $name, sub { ... })"
Add a parser sub that should be associated with exports via Devel::Declare
.ie n .IP "$meta\->get_parser( $name )" 4
.el .IP "\f(CW$meta\fR\->get_parser( \f(CW$name\fR )" 4
.IX Item "$meta->get_parser( $name )"
Get a parser by name.
.ie n .IP "$ref = $meta\->get_ref_from_package( $item )" 4
.el .IP "\f(CW$ref\fR = \f(CW$meta\fR\->get_ref_from_package( \f(CW$item\fR )" 4
.IX Item "$ref = $meta->get_ref_from_package( $item )"
Returns a reference to a specific package variable or sub.
.ie n .IP "$meta\->reexport( $package )" 4
.el .IP "\f(CW$meta\fR\->reexport( \f(CW$package\fR )" 4
.IX Item "$meta->reexport( $package )"
Re-export the exports in the provided package. Package may be an
Exporter::Declare based package or an Exporter based package.
.ie n .IP "$meta\->merge( $meta2 )" 4
.el .IP "\f(CW$meta\fR\->merge( \f(CW$meta2\fR )" 4
.IX Item "$meta->merge( $meta2 )"
Merge-in the exports and tags of the second meta object.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chad Granum exodist7@gmail.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010 Chad Granum
.PP
Exporter-Declare is free software; Standard perl licence.
.PP
Exporter-Declare is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or
\&\s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the license for more details.
