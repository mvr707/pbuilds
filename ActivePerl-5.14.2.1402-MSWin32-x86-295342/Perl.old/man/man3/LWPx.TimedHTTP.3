.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LWPx::TimedHTTP 3"
.TH LWPx::TimedHTTP 3 "2011-11-01" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWPx::TimedHTTP \- time the different stages of an HTTP request
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # do the work for you
\&    use LWP::UserAgent;                                                                                                                 
\&    use LWPx::TimedHTTP qw(:autoinstall);                                                                                     
\&
\&    # now just continue as normal                                                                                                               
\&    my $ua = LWP::UserAgent\->new;                                                                                                        
\&    my $response = $ua\->get("http://thegestalt.org");                                                                                   
\&    # ... with optional retrieving of metrics (in seconds)
\&    printf  "%f\en", $response\->header(\*(AqClient\-Request\-Connect\-Time\*(Aq);  
\&
\&
\&    # or if you don\*(Aqt like magic going on in the background
\&    use LWP::UserAgent;                                                                                                                 
\&    use LWP::Protocol;                                                                                                                  
\&    use LWPx::TimedHTTP;    
\&
\&    LWP::Protocol::implementor(\*(Aqhttp\*(Aq,  \*(AqLWPx::TimedHTTP\*(Aq);                                                                   
\&
\&    # or for https ....
\&    LWP::Protocol::implementor(\*(Aqhttps\*(Aq, \*(AqLWPx::TimedHTTP::https\*(Aq);
\&
\&    my $ua = LWP::UserAgent\->new;                                                                                                            
\&    my $response = $ua\->get("http://thegestalt.org");                                                                                       
\&    printf  "%f\en", $response\->header(\*(AqClient\-Request\-Connect\-Time\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module performs an \s-1HTTP\s0 request exactly the same 
as \fB\s-1LWP\s0\fR does normally except for the fact that it 
times each stage of the request and then inserts the 
results as header.
.PP
It's useful for debugging where abouts in a connection slow downs 
are occuring.
.SH "METRICS"
.IX Header "METRICS"
All times returned are in seconds
.SS "Client-Request-Dns-Time"
.IX Subsection "Client-Request-Dns-Time"
The time it took to do a \s-1DNS\s0 lookup on the host.
.PP
\&\fB\s-1NOTE:\s0\fR The value of this timing is \s-1NOT\s0 thread safe since it 
has to smuggle the data back via a global variable.
.SS "Client-Request-Connect-Time"
.IX Subsection "Client-Request-Connect-Time"
The time it took to connect to the remote server
.SS "Client-Request-Transmit-Time"
.IX Subsection "Client-Request-Transmit-Time"
The time it took to transmit the request
.SS "Client-Response-Server-Time"
.IX Subsection "Client-Response-Server-Time"
Time it took to respond to the request
.SS "Client-Response-Receive-Time"
.IX Subsection "Client-Response-Receive-Time"
Time it took to get the data back
.SH "AUTHOR"
.IX Header "AUTHOR"
Simon Wistow <simon@thegestalt.org>
.PP
Based entirely on work by David Carter \- 
this module is a little light frobbing and some packaging of
code he posted to the libwww-perl mailing list in response to
one of my questions.
.PP
His code was, in turn, based on \fBLWP::Protocol::http\fR by 
Gisle Aas which is distributed as part of the \fBlibwww\fR package.
.SH "COPYING"
.IX Header "COPYING"
(c)opyright 2002, Simon Wistow
.PP
Distributed under the same terms as Perl itself.
.PP
This software is under no warranty and will probably ruin your life, kill your friends, burn your house and bring about the apocalypse
.SH "BUGS"
.IX Header "BUGS"
None known
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::UserAgent, Time::HiRes
