.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Meta::Builder 3"
.TH Meta::Builder 3 "2010-10-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Meta::Builder \- Tools for creating Meta objects to track custom metrics.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Meta programming is becomming more and more popular. The popularity of Meta
programming comes from the fact that many problems are made significantly
easier. There are a few specialized Meta tools out there, for instance
<Class:MOP> which is used by Moose to track class metadata.
.PP
Meta::Builder is designed to be a generic tool for writing Meta objects. Unlike
specialized tools, Meta::Builder makes no assumptions about what metrics you
will care about. Meta::Builder also mkaes it simple for others to extend your
meta-object based tools by providing hooks for other packages to add metrics to
your meta object.
.PP
If a specialized Meta object tool is available ot meet your needs please use
it. However if you need a simple Meta object to track a couple metrics, use
Meta::Builder.
.PP
Meta::Builder is also low-sugar and low-dep. In most cases you will not want a
class that needs a meta object to use your meta-object class directly. Rather
you will usually want to create a sugar class that exports enhanced \s-1API\s0
functions that manipulate the meta object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
My/Meta.pm:
.PP
.Vb 3
\&    package My::Meta;
\&    use strict;
\&    use warnings;
\&
\&    use Meta::Builder;
\&
\&    # Name the accessor that will be defined in the class that uses the meta object
\&    # It is used to retrieve the classes meta object.
\&    accessor "mymeta";
\&
\&    # Add a metric with two actions
\&    metric mymetric => sub { [] },
\&           pop => sub {
\&               my $self = shift;
\&               my ( $data ) = @_;
\&               pop @$data;
\&           },
\&           push => sub {
\&               my $self = shift;
\&               my ( $data, $metric, $action, @args ) = @_;
\&               push @$data => @args;
\&           };
\&
\&    # Add an additional action to the metric
\&    action mymetric => ( get_ref => sub { shift });
\&
\&    # Add some predefined metric types + actions
\&    hash_metric \*(Aqmy_hashmetric\*(Aq;
\&    lists_metric \*(Aqmy_listsmetric\*(Aq;
.Ve
.PP
My.pm:
.PP
.Vb 3
\&    package My;
\&    use strict;
\&    use warnings;
\&
\&    use My::Meta;
\&
\&    My::Meta\->new( _\|_PACKAGE_\|_ );
\&
\&    # My::Meta defines mymeta() as the accessor we use to get our meta object.
\&    # this is the ONLY way to get the meta object for this class.
\&
\&    mymeta()\->mymetric_push( "some data" );
\&    mymeta()\->my_hashmetric_add( key => \*(Aqvalue\*(Aq );
\&    mymeta()\->my_listsmetric_push( list => qw/valueA valueB/ );
\&
\&    # It works fine as an object/class method as well.
\&    _\|_PACKAGE_\|_\->mymeta\->do_thing(...);
\&
\&    ...;
.Ve
.SH "USING"
.IX Header "USING"
When you use Meta::Builder your class is automatically turned into a subclass
of Meta::Builder::Base. In addition several \*(L"sugar\*(R" functions are exported
into your namespace. To avoid the \*(L"sugar\*(R" functions you can simply sublass
Meta::Builder::Base directly.
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .IP "metric( $name, \e&generator, %actions )" 4
.el .IP "metric( \f(CW$name\fR, \e&generator, \f(CW%actions\fR )" 4
.IX Item "metric( $name, &generator, %actions )"
Wraper around \f(CW\*(C`caller\-\*(C'\fR\fIadd_metric()\fR>. See Meta::Builder::Base.
.ie n .IP "action( $metric, $name, $code )" 4
.el .IP "action( \f(CW$metric\fR, \f(CW$name\fR, \f(CW$code\fR )" 4
.IX Item "action( $metric, $name, $code )"
Wraper around \f(CW\*(C`caller\-\*(C'\fR\fIadd_action()\fR>. See Meta::Builder::Base.
.ie n .IP "hash_metric( $name, %additional_actions )" 4
.el .IP "hash_metric( \f(CW$name\fR, \f(CW%additional_actions\fR )" 4
.IX Item "hash_metric( $name, %additional_actions )"
Wraper around \f(CW\*(C`caller\-\*(C'\fR\fIadd_hash_metric()\fR>. See Meta::Builder::Base.
.ie n .IP "lists_metric( $name, %additional_actions )" 4
.el .IP "lists_metric( \f(CW$name\fR, \f(CW%additional_actions\fR )" 4
.IX Item "lists_metric( $name, %additional_actions )"
Wraper around \f(CW\*(C`caller\-\*(C'\fR\fIadd_lists_metric()\fR>. See Meta::Builder::Base.
.ie n .IP "before( $metric, $action, $code )" 4
.el .IP "before( \f(CW$metric\fR, \f(CW$action\fR, \f(CW$code\fR )" 4
.IX Item "before( $metric, $action, $code )"
Wraper around \f(CW\*(C`caller\-\*(C'\fR\fIhook_before()\fR>. See Meta::Builder::Base.
.ie n .IP "after( $metric, $action, $code )" 4
.el .IP "after( \f(CW$metric\fR, \f(CW$action\fR, \f(CW$code\fR )" 4
.IX Item "after( $metric, $action, $code )"
Wraper around \f(CW\*(C`caller\-\*(C'\fR\fIhook_after()\fR>. See Meta::Builder::Base.
.ie n .IP "accessor( $name )" 4
.el .IP "accessor( \f(CW$name\fR )" 4
.IX Item "accessor( $name )"
Wraper around \f(CW\*(C`caller\-\*(C'\fR\fIset_accessor()\fR>. See Meta::Builder::Base.
.IP "\fImake_immutable()\fR" 4
.IX Item "make_immutable()"
Overrides all functions/methods that alter the meta objects meta-data. This in
effect prevents anything from adding new metrics, actions, or hooks without
directly editing the metadata.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chad Granum exodist7@gmail.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010 Chad Granum
.PP
Meta-Builder is free software; Standard perl licence.
.PP
Meta-Builder is distributed in the hope that it will be useful, but \s-1WITHOUT\s0
\&\s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0
\&\s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the license for more details.
